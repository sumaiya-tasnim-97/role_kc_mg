
"""
modify_pdb_columns(input_pdb, output_pdb)

This function modifies the occupancy, B-factor, and residue numbering of a PDB file.
It is primarily used to process a dimer structure generated by combining two monomers, 
where the second monomer may have artificially incremented residue numbers.

Key operations:
- For each ATOM or HETATM line:
    - Occupancy is set to 0.00 for all residues.
    - B-factor is set to 1.00 only for residues in the range 42–82 (corresponding to 
      selected residues of interest, e.g., a kissing loop); otherwise, it is set to 0.00.
    - Residues with original numbering ≥ 83 are renumbered by subtracting 41, effectively 
      bringing the second monomer's residue numbers into a standard 42–82 range.
        For example:
            - Original residue 83 becomes 42,
            - Residue 84 becomes 43,
            - … up to 123 becoming 82.
- Non-coordinate lines (e.g., REMARK, TER, END) are written unmodified.
- The formatting of the modified PDB lines ensures that field widths conform to 
  the PDB standard:
    - Residue number occupies columns 23–26 (right-aligned, 4 characters),
    - Occupancy and B-factor occupy columns 55–60 and 61–66 respectively 
      (formatted to width 6, two decimal places).

This function is useful when preparing PDB files for visualization or simulation setups 
that rely on consistent residue numbering or when selectively highlighting residues 
(e.g., for TLS, visualization masks, etc.).

Example:
    modify_pdb_columns("combined_shifted.pdb", "cs.pdb")
"""

def modify_pdb_columns(input_pdb, output_pdb):
    with open(input_pdb, 'r') as infile, open(output_pdb, 'w') as outfile:
        for line in infile:
            if line.startswith(('ATOM', 'HETATM')):
                try:
                    resid = int(line[22:26])  # original residue number
                    occupancy = " 0.00"
                    bfactor = " 1.00" if 42 <= resid <= 82 else " 0.00"

                    # Renumber residue: if resid >= 83, subtract 41 to start at 42
                    if resid >= 83:
                        new_resid = resid - 41
                    else:
                        new_resid = resid

                    # Format new residue number to fit into columns 23-26 (4 chars, right-aligned)
                    new_resid_str = f"{new_resid:>4}"

                    # Build new line with updated residue number, occupancy and B-factor
                    newline = (
                        line[:22] +  # up to residue number start
                        new_resid_str +  # new residue number (4 chars)
                        line[26:54] +  # rest of atom line before occupancy/bfactor
                        f"{occupancy:>6}{bfactor:>6}" +  # occupancy and b-factor columns
                        line[66:]  # rest of line
                    )
                    outfile.write(newline)
                except ValueError:
                    # If residue number parse fails, write line unchanged
                    outfile.write(line)
            else:
                outfile.write(line)

    print(f"✅ Modified PDB written to: {output_pdb}")

modify_pdb_columns("combined_shifted.pdb", "cs.pdb")

